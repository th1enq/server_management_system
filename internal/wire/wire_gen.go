// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/elastic/go-elasticsearch/v9"
	"github.com/redis/go-redis/v9"
	"github.com/th1enq/server_management_system/internal/config"
	"github.com/th1enq/server_management_system/internal/database"
	"github.com/th1enq/server_management_system/internal/handler"
	"github.com/th1enq/server_management_system/internal/repositories"
	"github.com/th1enq/server_management_system/internal/services"
	"github.com/th1enq/server_management_system/internal/worker"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitializeApp(config2 *config.Config) (*App, error) {
	db, err := provideDB(config2)
	if err != nil {
		return nil, err
	}
	client, err := provideRedis(config2)
	if err != nil {
		return nil, err
	}
	pgxPoolInterface, err := providePgx(config2)
	if err != nil {
		return nil, err
	}
	elasticsearchClient, err := provideElasticsearch(config2)
	if err != nil {
		return nil, err
	}
	serverRepository := repositories.NewServerRepository(db, pgxPoolInterface)
	serverService := services.NewServerService(serverRepository, client)
	serverHandler := handler.NewServerHandler(serverService)
	reportService := services.NewReportService(config2, elasticsearchClient, serverRepository)
	reportHandler := handler.NewReportHandler(reportService)
	monitoringWorker := provideMonitoringWorker(config2, serverRepository)
	app := &App{
		Config:           config2,
		DB:               db,
		Redis:            client,
		PGP:              pgxPoolInterface,
		Elasticsearch:    elasticsearchClient,
		ServerHandler:    serverHandler,
		ReportHandler:    reportHandler,
		MonitoringWorker: monitoringWorker,
		ReportService:    reportService,
	}
	return app, nil
}

// wire.go:

type App struct {
	Config           *config.Config
	DB               *gorm.DB
	Redis            *redis.Client
	PGP              database.PgxPoolInterface
	Elasticsearch    *elasticsearch.Client
	ServerHandler    *handler.ServerHandler
	ReportHandler    *handler.ReportHandler
	MonitoringWorker *worker.MonitoringWorker
	ReportService    services.ReportService
}

func provideElasticsearch(config2 *config.Config) (*elasticsearch.Client, error) {
	err := database.InitElasticsearchClient(config2)
	if err != nil {
		return nil, err
	}
	return database.ESClient, nil
}

func provideDB(config2 *config.Config) (*gorm.DB, error) {
	err := database.LoadDB(config2)
	if err != nil {
		return nil, err
	}
	return database.DB, nil
}

func providePgx(config2 *config.Config) (database.PgxPoolInterface, error) {
	err := database.LoadPgPool(config2)
	if err != nil {
		return nil, err
	}
	return database.PgPool, nil
}

func provideRedis(config2 *config.Config) (*redis.Client, error) {
	err := database.LoadRedis(config2)
	if err != nil {
		return nil, err
	}
	return database.RedisClient, nil
}

func provideMonitoringWorker(config2 *config.Config, serverRepo repositories.ServerRepository) *worker.MonitoringWorker {
	stopChan := make(chan bool)
	return worker.NewMonitoringWorker(config2, serverRepo, stopChan)
}
