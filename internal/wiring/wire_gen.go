// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wiring

import (
	"github.com/google/wire"
	"github.com/th1enq/server_management_system/internal/api"
	"github.com/th1enq/server_management_system/internal/api/http"
	"github.com/th1enq/server_management_system/internal/api/jobs"
	"github.com/th1enq/server_management_system/internal/app"
	"github.com/th1enq/server_management_system/internal/configs"
	"github.com/th1enq/server_management_system/internal/db"
	"github.com/th1enq/server_management_system/internal/handler"
	"github.com/th1enq/server_management_system/internal/middleware"
	"github.com/th1enq/server_management_system/internal/repository"
	"github.com/th1enq/server_management_system/internal/services"
	"github.com/th1enq/server_management_system/internal/utils"
)

// Injectors from wire.go:

func InitializeStandardServer(configFilePath configs.ConfigFilePath) (*app.StandaloneServer, func(), error) {
	config, err := configs.NewConfig(configFilePath)
	if err != nil {
		return nil, nil, err
	}
	server := config.Server
	log := config.Log
	logger, cleanup, err := utils.LoadLogger(log)
	if err != nil {
		return nil, nil, err
	}
	database := config.Database
	iDatabaseClient, err := db.NewDatabase(database, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	iServerRepository := repository.NewServerRepository(iDatabaseClient)
	cache := config.Cache
	iRedisClient, err := db.NewCache(cache, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	iServerService := services.NewServerService(iServerRepository, iRedisClient, logger)
	serverHandler := handler.NewServerHandler(iServerService, logger)
	email := config.Email
	elasticSearch := config.Elasticsearch
	client, cleanup2, err := db.LoadElasticSearch(elasticSearch, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	iHealthCheckService := services.NewHealthCheckService(client, iServerService, logger)
	iReportService := services.NewReportService(email, iHealthCheckService, logger)
	reportHandler := handler.NewReportHandler(iReportService, logger)
	iUserRepository := repository.NewUserRepository(iDatabaseClient)
	iUserService := services.NewUserService(iUserRepository, logger)
	jwt := config.JWT
	iTokenService := services.NewTokenService(jwt, logger, iRedisClient)
	iAuthService := services.NewAuthService(iUserService, iTokenService, logger)
	authHandler := handler.NewAuthHandler(iAuthService, logger)
	userHandler := handler.NewUserHandler(iUserService, logger)
	authMiddleware := middleware.NewAuthMiddleware(iAuthService, logger)
	httpHandler := http.NewHandler(serverHandler, reportHandler, authHandler, userHandler, authMiddleware)
	httpServer := http.NewServer(server, logger, httpHandler)
	cron := config.Cron
	sendDailyReport := jobs.NewSendDailyReport(iReportService)
	intervalCheckStatus := jobs.NewIntervalCheckStatus(iServerService)
	standaloneServer := app.NewStandaloneServer(httpServer, logger, cron, sendDailyReport, intervalCheckStatus)
	return standaloneServer, func() {
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

var WireSet = wire.NewSet(app.WireSet, configs.WireSet, handler.WireSet, db.WireSet, api.WireSet, repository.WireSet, services.WireSet, middleware.WireSet, utils.WireSet)
