// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wiring

import (
	"github.com/google/wire"
	"github.com/th1enq/server_management_system/internal/app"
	"github.com/th1enq/server_management_system/internal/configs"
	"github.com/th1enq/server_management_system/internal/controller"
	"github.com/th1enq/server_management_system/internal/dataaccess"
	"github.com/th1enq/server_management_system/internal/dataaccess/cache"
	"github.com/th1enq/server_management_system/internal/dataaccess/database"
	"github.com/th1enq/server_management_system/internal/dataaccess/elasticsearch"
	"github.com/th1enq/server_management_system/internal/handler"
	"github.com/th1enq/server_management_system/internal/handler/http"
	"github.com/th1enq/server_management_system/internal/handler/jobs"
	"github.com/th1enq/server_management_system/internal/repositories"
	"github.com/th1enq/server_management_system/internal/services"
	"github.com/th1enq/server_management_system/internal/utils"
)

// Injectors from wire.go:

func InitializeStandardServer(configFilePath configs.ConfigFilePath) (*app.StandaloneServer, func(), error) {
	config, err := configs.NewConfig(configFilePath)
	if err != nil {
		return nil, nil, err
	}
	server := config.Server
	log := config.Logging
	logger, cleanup, err := utils.LoadLogger(log)
	if err != nil {
		return nil, nil, err
	}
	configsDatabase := config.Database
	db, cleanup2, err := database.LoadDB(configsDatabase, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	pgxPoolInterface, cleanup3, err := database.LoadPgPool(configsDatabase, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	serverRepository := repositories.NewServerRepository(db, pgxPoolInterface)
	configsCache := config.Cache
	client, cleanup4, err := cache.LoadCache(configsCache, logger)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	serverService := services.NewServerService(serverRepository, client, logger)
	serverHandler := controller.NewServerHandler(serverService, logger)
	email := config.Email
	elasticSearch := config.Elasticsearch
	elasticsearchClient, cleanup5, err := elasticsearch.LoadElasticSearch(elasticSearch, logger)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	reportService := services.NewReportService(email, elasticsearchClient, serverService, logger)
	reportHandler := controller.NewReportHandler(reportService, logger)
	handler := http.NewHandler(serverHandler, reportHandler)
	httpServer := http.NewServer(server, logger, handler)
	cron := config.Cron
	sendDailyReport := jobs.NewSendDailyReport(reportService)
	standaloneServer := app.NewStandaloneServer(httpServer, logger, cron, sendDailyReport)
	return standaloneServer, func() {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

var WireSet = wire.NewSet(app.WireSet, configs.WireSet, controller.WireSet, dataaccess.WireSet, handler.WireSet, repositories.WireSet, services.WireSet, utils.WireSet)
